/*
1. COMPLETO - PASSOU POR TODOS OS TESTES
2. tive ajuda de outras pessoas na contrução das armadilhas e do tabuleiro
4. foi mais tempo para ser concluido, umas 2 horas
*/

class Player { //todo
  private label: number;       
  private pos: number;       
  private free: boolean;

  constructor(label: number) { //todo
    this.label = label;
    this.pos = 0;
    this.free = true;
  }

  public getLabel(): number { //todo
    return this.label
  }

  public getPos(): number { //todo
    return this.pos;
  }

  public setPos(pos: number) { //todo
    this.pos += pos;
  }

  public setFree(free: boolean): void { //todo
    this.free = free;
  }

  public isFree(): boolean { //todo
    if (this.free) {
      return true
    } else {
      return false;
    }
  }


  toString(): string {
    return "Player " + this.label + " at " + this.pos + " is " + (this.free ? "free" : "free");
  }
}


class Board {
  trapList: number[];
  running: boolean;   
  size: number;   
  players: Player[]; 

  constructor(nPlayers: number, size: number) {
    this.size = size + 1;
    this.trapList = [];
    this.running = true;
    this.players = [];
    for (let i = 1; i <= nPlayers; i++) {
      this.players.push(new Player(i));
    }
  }

  addTrap(pos: number) {
    if (this.trapList.length + 1 <= 3) {
      this.trapList.push(pos);
    } else {

    }
  }

  rollDice(value: number) { //todo
    if (!this.running) {
      console.log("game is over");
      return;
    }

    if (this.players[0].getPos() + value >= this.size) {
      console.log(`player${this.players[0].getLabel()} ganhou`);
      let player = this.players[0];
      let total = player.getPos();
      player.setPos(total * -1);
      player.setPos(this.size - 1);
      this.running = false;
      return;
    }

    if (!this.players[0].isFree() && value % 2 !== 0) {
      console.log(`player${this.players[0].getLabel()} continua preso`);
      let player = this.players.shift();
      this.players.push(player);
      return;
    } else if (!this.players[0].isFree() && value % 2 == 0) {
      console.log(`player${this.players[0].getLabel()} se libertou`);
      let player = this.players.shift();
      player.setFree(true);
      this.players.push(player);
      return;
    }

    this.players[0].setPos(value);
    let player = this.players.shift();
    console.log(`player${player.getLabel()} andou para ${player.getPos()}`);

    for (let trap of this.trapList) {
      if (trap === player.getPos()) {
        player.setFree(false);
        console.log(`player${player.getLabel()} caiu em uma armadilha`);
      }
    }
    this.players.push(player);

  }


  toString() {
    let str = "";
    for (let i = 1; i <= this.players.length; i++) {
      let p = this.players[this.players.findIndex((player) => player.getLabel() == i)];
      let line: string[] = Array(this.size).fill(".");
      line[p.getPos()] = "" + p.getLabel();
      str += "player" + p.getLabel() + ": " + line.join("") + "\n";
    }

    let traps = Array(this.size).fill(".")
    for (let t of this.trapList)
      traps[t] = "x";
    str += "traps__: " + traps.join("");
    return str;
  }
}

function main() {
    let chain = new Map();
    let par: string[] = [];
    let board = new Board(0, 0);

    chain.set("init", () => { board = new Board(+par[1], +par[2]); });
    chain.set("addTrap", () => { board.addTrap(+par[1]); });
    chain.set("roll", () => { board.rollDice(+par[1]); });
    chain.set("show", () => { puts(board.toString()); });

    execute(chain, par);
}

import { readFileSync } from "fs";
let __lines = readFileSync(0).toString().split("\n");
let input = () => { 
    let a = __lines.shift(); 
    return a === undefined ? "" : a; 
};
let write = (text: any) => process.stdout.write("" + text);
let puts = (text: any) => console.log(text);

function execute(chain: Map<string, Function>, ui: string[]) {
    while (true) {
        let line = input();
        puts("$" + line);
        ui.splice(0); //apagar tudo
        line.split(" ").forEach((x: string) => ui.push(x));

        let cmd = ui[0];
        if (cmd == "end") {
            return;
        } else if (chain.has(cmd)) {
            chain.get(cmd)!();
        } else {
            puts("fail: command not found");
        }
    }
}

main()

